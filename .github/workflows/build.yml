name: An√°lisis CI con SonarCloud y Deploy (CD) S3 

on:
  push:
    branches:
      - master
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - name: üì• Descargar el c√≥digo del repositorio
        uses: actions/checkout@v3  # ‚úÖ Versi√≥n actualizada
        with:
          fetch-depth: 0

      - name: üîß Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: üì¶ Instalar dependencias
        run: npm ci  # üîê Instalaci√≥n segura con package-lock.json

      - name: üõ†Ô∏è Dar permisos a Karma
        run: chmod +x node_modules/.bin/karma

      - name: üß™ Ejecutar pruebas con Karma y Jasmine - generaci√≥n de coverage
        run: |
          npm run test -- --no-watch --code-coverage --browsers=ChromeHeadless  # üìä Genera reporte de cobertura

      - name: üîç Escanear c√≥digo con SonarCloud
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

      - name: üõë Verificar resultado de SonarCloud
        id: sonarcloud-check
        run: |
          SONAR_PROJECT_KEY=${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}
          SONAR_URL="https://sonarcloud.io/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}"

          RESPONSE=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_URL}")
          STATUS=$(echo "${RESPONSE}" | jq -r '.projectStatus.status')

          if [ "${STATUS}" == "OK" ]; then
            echo "‚úÖ El an√°lisis de SonarCloud ha pasado correctamente."
          else
            echo "‚ùå El an√°lisis de SonarCloud ha fallado."
            echo "Detalles del fallo:"
            echo "${RESPONSE}" | jq '.projectStatus.conditions'
            exit 1  # üí• Fuerza el fallo del job
          fi

  deployS3:
      name: üöÄ Deploy S3 
      runs-on: ubuntu-latest
      needs: sonarqube
      steps:
        - name: üì• Checkout del c√≥digo
          uses: actions/checkout@v3

        - name: üîß Configurar Node.js
          uses: actions/setup-node@v4
          with:
            node-version: 18

        - name: üì¶ Instalar dependencias
          run: npm ci

        - name: üõ†Ô∏è Compilar aplicaci√≥n Angular
          run: npm run build -- --verbose

        - name: üìÅ Empaquetar archivos del build (build.zip para CodeDeploy)
          run: |        
            mkdir deploy_folder_zip
            cp appspec.yml deploy_folder_zip/
            cp -r script deploy_folder_zip/

            chmod +x deploy_folder_zip/script/*.sh  

            cp -r dist/appTareas/browser/* deploy_folder_zip/

            cd deploy_folder_zip
            zip -r ../build.zip .

        - name: üì¶ Instalar AWS CLI (para ejecutar comandos AWS) y jq (parsear el JSON que devuelve AWS Secrets Manager)
          run: |
            sudo apt-get update
            sudo apt-get install -y python3-pip jq
            pip3 install awscli --upgrade --user
            echo "$HOME/.local/bin" >> $GITHUB_PATH
            
        - name: üîê Configurar credenciales AWS
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

        - name: üîê Obtener secretos desde AWS Secrets Manager
          id: get-secrets
          run: |
            echo "Recuperando secretos..."
            SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id s3-ec2-secrets --region ${{ secrets.AWS_REGION }} | jq -r .SecretString)

            AWS_S3_BUCKET=$(echo $SECRET_JSON | jq -r .AWS_S3_BUCKET)
            AWS_GRUPO_IMPLEMENTACION=$(echo $SECRET_JSON | jq -r .AWS_GRUPO_IMPLEMENTACION)
            AWS_APLICACION_CODE_DEPLOY=$(echo $SECRET_JSON | jq -r .AWS_APLICACION_CODE_DEPLOY)

            echo "AWS_S3_BUCKET=$AWS_S3_BUCKET" >> $GITHUB_ENV
            echo "AWS_GRUPO_IMPLEMENTACION=$AWS_GRUPO_IMPLEMENTACION" >> $GITHUB_ENV
            echo "AWS_APLICACION_CODE_DEPLOY=$AWS_APLICACION_CODE_DEPLOY" >> $GITHUB_ENV

        - name: üöÄ Subir build.zip a S3
          run: |
              aws s3 cp build.zip s3://${{ env.AWS_S3_BUCKET }}/build.zip
              echo "‚úÖ build.zip subido exitosamente a S3"
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}
          
        - name: üîç Validar que build.zip se subi√≥ correctamente
          run: |
            if aws s3 ls s3://${{ env.AWS_S3_BUCKET }}/build.zip; then
              echo "‚úÖ Validaci√≥n exitosa: build.zip est√° en S3"
            else
              echo "‚ùå ERROR: build.zip NO se encuentra en S3"
              exit 1
            fi
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}

        - name: üöÄ Desplegar con CodeDeploy
          id: deploy
          run: |
            DEPLOYMENT_ID=$(aws deploy create-deployment \
              --application-name ${{ env.AWS_APLICACION_CODE_DEPLOY }} \
              --deployment-group-name ${{ env.AWS_GRUPO_IMPLEMENTACION }} \
              --deployment-config-name CodeDeployDefault.OneAtATime \
              --s3-location bucket=${{ env.AWS_S3_BUCKET }},key=build.zip,bundleType=zip \
              --region ${{ secrets.AWS_REGION }} \
              --query "deploymentId" --output text)
  
            echo "deployment_id=${DEPLOYMENT_ID}" >> $GITHUB_OUTPUT
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}
  
        - name: üîç Monitorear estado del despliegue
          run: |
            DEPLOYMENT_ID=${{ steps.deploy.outputs.deployment_id }}
            echo "‚è≥ Esperando finalizaci√≥n del despliegue ID: $DEPLOYMENT_ID"

            STATUS="InProgress"
            while [[ "$STATUS" == "InProgress" || "$STATUS" == "Created" ]]; do
              STATUS=$(aws deploy get-deployment \
                --deployment-id $DEPLOYMENT_ID \
                --region us-west-2 \
                --query "deploymentInfo.status" --output text)
              echo "‚û° Estado actual: $STATUS"
              sleep 10
            done

            if [ "$STATUS" == "Succeeded" ]; then
              echo "‚úÖ ¬°Despliegue exitoso!"
            else
              echo "‚ùå Despliegue fallido. Estado final: $STATUS"
              echo "üîç Detalle del error:"
              aws deploy get-deployment \
                --deployment-id $DEPLOYMENT_ID \
                --region us-west-2 \
                --query "deploymentInfo.errorInformation" \
                --output json
              exit 1
            fi

          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}
      
          
          
          
          
          
          
          
          
          
          
          


      
